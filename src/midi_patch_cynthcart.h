/*
 * USBSID-Pico is a RPi Pico (RP2040) based board for interfacing one or two
 * MOS SID chips and/or hardware SID emulators over (WEB)USB with your computer,
 * phone or ASID supporting player
 *
 * midipatches.h
 * This file is part of USBSID-Pico (https://github.com/LouDnl/USBSID-Pico)
 * File author: LouD
 *
 * The contents of this file are based upon and heavily inspired by the sourcecode from
 * Cynthcart by PaulSlocum: https://github.com/PaulSlocum/cynthcart
 *
 * Any licensing conditions from either of the above named sources automatically
 * apply to this code
 *
 * Copyright (c) 2024 LouD
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 2.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 */

/* Bank 9 */
/* Hard coded patches */
// static char patchNAMES[30][20] = {
//   "SAWTOOTH BASS",    // 0
//   "GRITTY BASS",      // 1
//   "PORTAMENTO 5THS",  // 2
//   "SAW PORTAMENTO",   // 3
//   "PULSE 5THS",       // 4
//   "PULSE HIGH PORT",  // 5
//   "TRINGL HIGH LONG", // 6
//   "TRIANGLE DROP",    // 7
//   "SID EXPLOSION",    // 8
//   "MUTE",             // 9
//   "FILTER BASS",      // 10
//   "SWEEP ARP",        // 11
//   "PLUCK ARP",        // 12
//   "SLOW ARP",         // 13
//   "FILTER STACK 1",   // 14
//   "FILTER STACK 2",   // 15
//   "PULSAR",           // 16
//   "VIBRATO LEAD",     // 17
//   "SLOW RISE",        // 18
//   "BENDING ECHO",     // 19
//   "6 CHANNEL SAW",    // 20
//   "ARP LEAD",         // 21
//   "LASER BASS",       // 22
//   "TROMBONE BLAST",   // 23
//   "NOISY SQUARE ARP", // 24
//   "TRIANGLE SYNC",    // 25
//   "MONO SYNC ECHO",   // 26
//   "CLEAN SAWTOOTH",   // 27
//   "CLEAN TRIANGLE",   // 28
//   "CLEAN SQUARE",     // 29
// };
// static uint8_t patchFX[30] = { /* ?? */
//   0, 5, 0, 0, 7, 6, 1, 3, 2, 0,
//   3, 1, 3, 0, 2, 3, 4, 1, 1, 2,
//   0, 3, 1, 3, 3, 0, 3, 0, 0, 0,
// };
// static uint8_t patchLFO[30] = { /* ?? */ // (TREMOLO)
//   0x11, 0x02, 0x02, 0x13, 0x13, 0x00, 0x01, 0x02, 0x13, 0x00,
//   0x00, 0x22, 0x13, 0x11, 0x10, 0x02, 0x00, 0x33, 0x10, 0x11,
//   0x10, 0x12, 0x13, 0x00, 0x00, 0x13, 0x13, 0x00, 0x00, 0x00,
// };
// static uint8_t patchOctave[30] = {  /* Starting octave */
//   0, 0, 1, 1, 1, 2, 3, 3, 0, 0,
//   1, 2, 3, 1, 1, 2, 3, 3, 1, 3,
//   1, 3, 0, 3, 3, 1, 1, 1, 3, 1,
// };
static uint8_t patchAD[30] = { /* 0x05, 0x0C, 0x13 */
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xA0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
static uint8_t patchSR1[30] = { /* 0x06 */
  0xF0, 0xF5, 0xF0, 0xF0, 0xF8, 0xF0, 0xFE, 0xF6, 0xF0, 0,
  0xF0, 0xFA, 0xF6, 0xF6, 0xFA, 0xF9, 0xFE, 0xF7, 0xFF, 0xEE,
  0xF0, 0xF5, 0xF5, 0x86, 0xF6, 0xF2, 0xF8, 0xF2, 0xF2, 0xF0,
};
static uint8_t patchSR2[30] = { /* 0x0D */
  0xF0, 0xF5, 0xF0, 0xF0, 0xF8, 0xF0, 0xFE, 0xF6, 0xF0, 0,
  0xF0, 0xFA, 0xF6, 0xF6, 0xFA, 0xF9, 0xFE, 0xF7, 0xFF, 0xEE,
  0xF0, 0xF5, 0xF5, 0xF6, 0x54, 0xF2, 0xF8, 0xF2, 0xF2, 0xF0,
};
static uint8_t patchSR3[30] = { /* 0x14 */
  0xF0, 0xF5, 0xF0, 0xF0, 0xF8, 0xF0, 0xFE, 0xF6, 0xF0, 0,
  0xF0, 0xFA, 0xF6, 0xF6, 0xFA, 0xF9, 0xFE, 0xF7, 0xFF, 0xEE,
  0xF0, 0xF5, 0xF5, 0xF6, 0xF6, 0xF2, 0xF8, 0xF2, 0xF2, 0xF0,
};
// static uint8_t patchPaddle[30] = { /* 0x15 FC HI ~ Paddle input */
//   0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//   0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//   0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
// };
static uint8_t newPatchFiltCut[30] = { /* 0x16 FC LO cut off */
  0xB0, 0x90, 0xC0, 0xFF, 0x40, 0x50, 0xC0, 0x70, 0x80, 0,
  0x80, 0xA0, 0xC0, 0xFF, 0xA0, 0x80, 0xC0, 0xC0, 0x80, 0x80,
  0xC0, 0xF0, 0xC0, 0xb0, 0xA0, 0x50, 0x50, 0xC0, 0xC0, 0x80,
};
static uint8_t patchVol[30] = { /* 0x18 Volume */
  0xf, 0xF, 0xb, 0x9, 0x9, 0x7, 0xF, 0xC, 0xc, 0,
  0xf, 0xc, 0xF, 0xb, 0x9, 0x7, 0xF, 0xc, 0xF, 0x8,
  0xf, 0xC, 0xb, 0x9, 0xF, 0xF, 0xC, 0xF, 0xF, 0xc,
};
static uint8_t patchPWL[30] = { /* 0x02, 0x09, 0x10 */
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
};
static uint8_t patchPWH[30] = { /* 0x03, 0x0A, 0x11 */
  8, 8, 8, 8, 8, 8, 8, 8, 8, 0,
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
};
static uint8_t patchWave1[30] = { /* 0x04 Wave type */
  0x20, 0x20, 0x20, 0x20, 0x40, 0x40, 0x10, 0x10, 0x80, 0,
  0x20, 0x20, 0x20, 0x20, 0x40, 0x40, 0x10, 0x20, 0x20, 0x40,
  0x20, 0x20, 0x14, 0x80, 0x40, 0x12, 0x14, 0x20, 0x10, 0x40,
};
static uint8_t patchWave2[30] = { /* 0x0B Wave type */
  0x20, 0x20, 0x20, 0x20, 0x40, 0x40, 0x10, 0x10, 0x80, 0,
  0x20, 0x20, 0x20, 0x20, 0x40, 0x40, 0x10, 0x20, 0x20, 0x40,
  0x20, 0x20, 0x14, 0x20, 0x80, 0x12, 0x14, 0x20, 0x10, 0x40,
};
static uint8_t patchWave3[30] = { /* 0x12 Wave type*/
  0x20, 0x20, 0x20, 0x20, 0x40, 0x40, 0x10, 0x10, 0x80, 0,
  0x20, 0x20, 0x20, 0x20, 0x40, 0x40, 0x10, 0x20, 0x20, 0x40,
  0x20, 0x20, 0x14, 0x10, 0x10, 0x12, 0x14, 0x20, 0x10, 0x40,
};
static uint8_t patchFilt[30] = { /* 0x17 Res/Filt */
  0xEF, 0xEF, 0x0F, 0x0F, 0xEF, 0xEF, 0x0F, 0x0F, 0xEF, 0xEF,
  0xEF, 0xEF, 0x0F, 0x0F, 0xEF, 0xEF, 0x0F, 0x0F, 0xEF, 0xEF,
  0xEF, 0xEF, 0x0F, 0x0F, 0xEF, 0xEF, 0xEF, 0x0F, 0x0F, 0xEF,
};
static uint8_t patchVolMode[30] = { /* 0x18 Mode */
  0x10, 0x10, 0x10, 0x10, 0x20, 0x20, 0x10, 0x10, 0x10, 0x10,
  0x10, 0x10, 0x10, 0x10, 0x20, 0x20, 0x10, 0x10, 0x10, 0x10,
  0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x20, 0x10, 0x10, 0x10,
};
// static uint8_t octaveTable[5] = { /* ?? */
//     0,12,24,36,48
// };
// static uint8_t pwLFO[16] = {
//   0b00010000, 0b00110000, 0b01010000, 0b01110000,
// 	0b10010000, 0b10110000, 0b11010000, 0b11110000,
// 	0b11110000, 0b11010000, 0b10110000, 0b10010000,
// 	0b01110000, 0b01010000, 0b00110000, 0b00010000,
// };
// static uint8_t patOffset[6] = {
// 	0,40,80,120,160,200
// };
// static uint8_t voiceOffset[3] = {
// 	0x0,0x7,0xE
// };
