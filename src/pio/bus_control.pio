;
; USBSID-Pico is a RPi Pico/PicoW (RP2040) & Pico2 (RP2350) based board for
; interfacing one or two MOS SID chips and/or hardware SID emulators over
; (WEB)USB with your computer, phone or ASID supporting player
;
; bus_control.pio
; This file is part of USBSID-Pico (https://github.com/LouDnl/USBSID-Pico)
; File author: LouD
;
; Copyright (c) 2024-2025 LouD
;
; This program is free software: you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation, version 2.
;
; This program is distributed in the hope that it will be useful, but
; WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
; General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program. If not, see <http://www.gnu.org/licenses/>.
;

; BUS clock = 32 * SID clock
; Example:
; 32MHz BUS clock @ 1MHz SID clock
; 32MHZ is 0.03125µs per cycle
; 32MHZ is 31.25ns per cycle
; 1MHz is 1µs per cycle
; 1MHz is 1000ns per cycle
; A 1MHz/1µs SID cycle _should_ contain 32 BUS cycles
; This _should_ mean that 1 command or NOP == 31.25ns
;
; Except?
; nop 26 waits 15 cycles to and including out pins
; nop 25 waits 15 cycles to and including out pins
; nop 24 waits 14 cycles to and including out pins
; nop 14 waits 9 cycles to and including out pins
; so 10 nops is 5 cycles? WTF!?
;

.define PUBLIC PHI 22
.define PUBLIC BUSIRQ 0
.define PUBLIC DATAIRQ 1

; Delay counter program
.program delay_timer
.wrap_target
    pull block              ; Pull data from FIFO
    out x 16                ; Move data into scratch register x
delay:
    wait 1 gpio PHI         ; Wait for clock to go high
    wait 0 gpio PHI         ; Wait for clock to go low
    jmp x-- delay           ; Decrease x and restart count
    irq set BUSIRQ          ; Set IRQ and continue
    irq wait DATAIRQ        ; Set IRQ and wait for its release
.wrap

; Bus control program
.program bus_control
.wrap_target
    pull block              ; Pull data from FIFO
    wait 1 irq BUSIRQ       ; Wait for IRQ signal
    wait 0 gpio PHI   [26]  ; Wait for clock to go low
    out pins, 3             ; Set control pins (19-21)
    wait 1 gpio PHI   [24]  ; Wait for clock to go high
    jmp pin read            ; Jump to read if IN pin is high
    jmp done                ; Jump to done if write and wait
read:
    in pins, 8              ; Read data bus into isr
    in NULL, 24             ; Shift the isr 24 bits to the right
    push block              ; Push isr to fifo
done:
    wait 0 gpio PHI         ; Wait for clock to go low
    out pins, 3             ; Set control to next 3 bits from fifo
.wrap

; Data and address bus program ~ pinstate stays the same until next write
.program data_bus
.wrap_target
    pull block              ; Pull data from FIFO
    wait 1 irq DATAIRQ      ; Wait for data irq signal ~ should trigger exactly 1 cycle after datairq
    wait 0 gpio PHI    [26] ; Wait for clock to go low
    out pins, 16            ; Set data bus pins
    out pindirs 16          ; Set pin directions
    wait 1 gpio PHI         ; Wait for clock to go high
    wait 0 gpio PHI         ; Wait for clock to go low
.wrap
